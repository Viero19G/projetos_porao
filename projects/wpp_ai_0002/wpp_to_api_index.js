// wpp_to_api_index.js

const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const fs = require('fs').promises; // Para opera√ß√µes ass√≠ncronas com arquivos
require('dotenv').config(); // Carrega as vari√°veis de ambiente do arquivo .env

// Polifills para FormData em Node.js.
// Certifique-se de que 'form-data' est√° instalado (npm install form-data)
const FormData = require('form-data');
// Remove a declara√ß√£o global.Blob, pois enviaremos o Buffer diretamente
// try {
//     global.Blob = require('node:buffer').Blob; // Node.js 16+
// } catch (e) {
//     console.warn("node:buffer.Blob not available. If you encounter issues with FormData and Blob, consider adding 'node-fetch' or similar polyfill.");
// }

class WhatsAppOpenAIBot {
    constructor() {
        // Configura√ß√£o do cliente WhatsApp Web
        this.client = new Client({
            authStrategy: new LocalAuth({ clientId: "whatsapp-bot-jwt" }), // Garante sess√£o local √∫nica
            puppeteer: {
                headless: true, // Modo headless (sem interface gr√°fica)
                args: ['--no-sandbox', '--disable-setuid-sandbox'] // Argumentos para compatibilidade em diferentes ambientes
            }
        });

        // Configura√ß√µes da API DRF
        this.drfApiConfig = {
            baseURL: process.env.DRF_API_BASE_URL || 'http://localhost:8000/api/',
            username: process.env.DRF_USERNAME,
            password: process.env.DRF_PASSWORD,
            jwtToken: null, // Token de acesso JWT (access token)
            jwtRefreshToken: null, // Token de renova√ß√£o JWT (refresh token)
            jwtFilePath: './jwt.txt', // Caminho para armazenar o access token
            jwtRefreshFilePath: './jwt_refresh.txt' // Caminho para armazenar o refresh token
        };

        // Configura√ß√£o inicial para Axios para evitar redefini√ß√µes
        this.axiosInstance = axios.create({
            baseURL: this.drfApiConfig.baseURL,
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: 60000 // Aumenta o timeout para 60 segundos (1 minuto) para esperar a API
        });

        this.setupEventListeners();
    }

    /**
     * Configura os listeners de eventos do cliente WhatsApp.
     */
    setupEventListeners() {
        this.client.on('qr', (qr) => {
            console.log('Escaneie o QR Code abaixo com seu WhatsApp:');
            qrcode.generate(qr, { small: true });
        });

        this.client.on('ready', async () => {
            console.log('‚úÖ WhatsApp Bot est√° pronto!');
            await this.authenticateWithDrfApi(); // Tenta autenticar com a API DRF ao iniciar
        });

        this.client.on('message', async (message) => {
            await this.handleMessage(message);
        });

        this.client.on('message_create', async (message) => {
            // Processa mensagens de √°udio (PTT - Push To Talk) que n√£o s√£o enviadas pelo pr√≥prio bot
            if (message.hasMedia && message.type === 'ptt' && !message.fromMe) {
                console.log(`üé§ Mensagem de √°udio recebida de ${message.from}`);
                await this.handleMediaMessage(message);
            }
        });

        this.client.on('auth_failure', (msg) => {
            console.error('‚ùå Falha na autentica√ß√£o do WhatsApp:', msg);
        });

        this.client.on('disconnected', (reason) => {
            console.log('‚ùå Cliente desconectado do WhatsApp:', reason);
        });
    }

    // --- M√©todos de Autentica√ß√£o JWT com a API DRF ---

    /**
     * Tenta autenticar com a API DRF. Primeiro tenta renovar o token existente,
     * se falhar, tenta fazer um novo login completo.
     * @returns {boolean} True se a autentica√ß√£o foi bem-sucedida, False caso contr√°rio.
     */
    async authenticateWithDrfApi() {
        try {
            // 1. Tentar ler o Access Token e Refresh Token do arquivo
            try {
                this.drfApiConfig.jwtToken = (await fs.readFile(this.drfApiConfig.jwtFilePath, 'utf8')).trim();
                this.drfApiConfig.jwtRefreshToken = (await fs.readFile(this.drfApiConfig.jwtRefreshFilePath, 'utf8')).trim();
                console.log('üîë JWT e Refresh Token lidos do arquivo. Tentando usar...');
            } catch (readError) {
                console.warn('‚ö†Ô∏è Arquivo JWT/Refresh Token n√£o encontrado ou erro de leitura. Iniciando com tokens nulos.');
                this.drfApiConfig.jwtToken = null;
                this.drfApiConfig.jwtRefreshToken = null;
            }

            // 2. Se houver Refresh Token, tentar renovar
            if (this.drfApiConfig.jwtRefreshToken) {
                const refreshSuccess = await this.refreshJwtToken();
                if (refreshSuccess) {
                    return true; // Access token renovado, podemos prosseguir
                }
            }

            // 3. Se ainda n√£o tiver Access Token (ou o refresh falhou), fazer login completo
            if (!this.drfApiConfig.jwtToken) {
                if (!this.drfApiConfig.username || !this.drfApiConfig.password) {
                    throw new Error('Credenciais de usu√°rio e senha da API DRF n√£o configuradas no .env para login.');
                }
                console.log('üîÑ Obtendo novo JWT (login completo) da API DRF...');
                const loginUrl = 'token/'; // Endpoint correto: /api/token/
                const response = await this.axiosInstance.post(loginUrl, {
                    username: this.drfApiConfig.username,
                    password: this.drfApiConfig.password,
                });

                this.drfApiConfig.jwtToken = response.data.access;
                this.drfApiConfig.jwtRefreshToken = response.data.refresh; // Salva o refresh token

                await fs.writeFile(this.drfApiConfig.jwtFilePath, this.drfApiConfig.jwtToken, 'utf8');
                await fs.writeFile(this.drfApiConfig.jwtRefreshFilePath, this.drfApiConfig.jwtRefreshToken, 'utf8');
                console.log('‚úÖ Novo JWT obtido e salvo com sucesso.');
            }
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao autenticar com a API DRF:', error.response?.data || error.message);
            // Limpa tokens em caso de falha para for√ßar novo login na pr√≥xima tentativa
            this.drfApiConfig.jwtToken = null;
            this.drfApiConfig.jwtRefreshToken = null;
            await fs.unlink(this.drfApiConfig.jwtFilePath).catch(() => {});
            await fs.unlink(this.drfApiConfig.jwtRefreshFilePath).catch(() => {});
            return false;
        }
    }

    /**
     * Tenta renovar o Access Token usando o Refresh Token existente.
     * @returns {boolean} True se a renova√ß√£o foi bem-sucedida, False caso contr√°rio.
     */
    async refreshJwtToken() {
        try {
            if (!this.drfApiConfig.jwtRefreshToken) {
                console.warn('‚ö†Ô∏è N√£o h√° Refresh Token dispon√≠vel para renova√ß√£o.');
                return false;
            }

            console.log('üîÑ Tentando renovar Access Token usando Refresh Token...');
            const refreshUrl = 'token/refresh/'; // Endpoint correto: /api/token/refresh/
            const response = await this.axiosInstance.post(refreshUrl, {
                refresh: this.drfApiConfig.jwtRefreshToken,
            });

            this.drfApiConfig.jwtToken = response.data.access; // Novo access token
            // Se o refresh token tamb√©m for atualizado pela API (opcional na sua configura√ß√£o JWT),
            // voc√™ pode salv√°-lo novamente aqui:
            // this.drfApiConfig.jwtRefreshToken = response.data.refresh;
            
            await fs.writeFile(this.drfApiConfig.jwtFilePath, this.drfApiConfig.jwtToken, 'utf8');
            // await fs.writeFile(this.drfApiConfig.jwtRefreshFilePath, this.drfApiConfig.jwtRefreshToken, 'utf8');
            console.log('‚úÖ Access Token renovado com sucesso.');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao renovar JWT usando Refresh Token:', error.response?.data || error.message);
            // Invalida ambos os tokens se o refresh falhar (refresh token expirado/inv√°lido)
            this.drfApiConfig.jwtToken = null;
            this.drfApiConfig.jwtRefreshToken = null;
            await fs.unlink(this.drfApiConfig.jwtFilePath).catch(() => {});
            await fs.unlink(this.drfApiConfig.jwtRefreshFilePath).catch(() => {});
            return false;
        }
    }

    /**
     * Garante que a chamada √† API √© feita com um token autenticado.
     * Tenta reautenticar se receber um 401.
     * @param {object} axiosConfig - Configura√ß√£o do Axios para a requisi√ß√£o.
     * @returns {Promise<object>} A resposta da requisi√ß√£o Axios.
     * @throws {Error} Se a autentica√ß√£o falhar completamente ou ocorrer outro erro.
     */
    async ensureAuthenticatedCall(axiosConfig) {
        let response;
        try {
            // Adiciona o token de autoriza√ß√£o √† requisi√ß√£o
            axiosConfig.headers = {
                ...axiosConfig.headers,
                'Authorization': `Bearer ${this.drfApiConfig.jwtToken}`,
            };
            response = await this.axiosInstance(axiosConfig); // Usa a inst√¢ncia Axios configurada
            return response;
        } catch (error) {
            if (error.response && error.response.status === 401) {
                console.warn('Token JWT expirado ou inv√°lido. Tentando reautenticar...');
                const authSuccess = await this.authenticateWithDrfApi(); // Tentar reautenticar (inclui refresh ou login)
                if (authSuccess) {
                    // Se a reautentica√ß√£o for bem-sucedida, tenta a requisi√ß√£o original novamente com o novo token
                    axiosConfig.headers['Authorization'] = `Bearer ${this.drfApiConfig.jwtToken}`;
                    response = await this.axiosInstance(axiosConfig);
                    return response;
                } else {
                    throw new Error('Falha total na autentica√ß√£o com a API DRF. N√£o foi poss√≠vel continuar.');
                }
            } else {
                throw error; // Lan√ßa outros erros (rede, 404, 500, etc.)
            }
        }
    }

    // --- M√©todos de Tratamento de Mensagens do WhatsApp ---

    /**
     * Extrai apenas os d√≠gitos do ID do WhatsApp e tenta convert√™-los para um inteiro.
     * Retorna null se a convers√£o falhar.
     * @param {string} whatsappIdString - O ID do WhatsApp no formato "555491602127@c.us".
     * @returns {number|null} O ID num√©rico ou null.
     */
    getNumericWhatsAppId(whatsappIdString) {
        // Remove tudo que n√£o for d√≠gito
        const numericPart = whatsappIdString.replace(/\D/g, ''); 
        
        try {
            // Tenta converter para inteiro
            const numericId = parseInt(numericPart, 10);
            // Verifica se a convers√£o resultou em um n√∫mero v√°lido
            if (isNaN(numericId)) {
                console.error(`Falha ao converter ${whatsappIdString} para ID num√©rico: Resultado NaN.`);
                return null;
            }
            return numericId;
        } catch (e) {
            console.error(`Erro ao converter ${whatsappIdString} para ID num√©rico:`, e);
            return null;
        }
    }

    /**
     * Lida com mensagens de texto e comandos recebidos do WhatsApp.
     * @param {object} message - Objeto de mensagem do whatsapp-web.js.
     */
    async handleMessage(message) {
        try {
            // Ignora mensagens de status, mensagens enviadas pelo pr√≥prio bot ou com m√≠dia (lidado por message_create)
            if (message.from === 'status@broadcast' || message.fromMe || message.hasMedia) {
                return;
            }

            if (message.type === 'chat') {
                console.log(`üì® Mensagem de texto recebida de ${message.from}: ${message.body}`);
            }

            // L√≥gica para comandos espec√≠ficos
            if (message.body.toLowerCase().startsWith('/limpar')) {
                await this.sendToDrfApiAndRespond(message, 'command', { command: 'clear_history' });
                return;
            }

            if (message.body.toLowerCase().startsWith('/ajuda')) {
                const helpText = `ü§ñ *Comandos dispon√≠veis:*
                
/limpar - Limpa o hist√≥rico da conversa com a IA.
/ajuda - Mostra esta mensagem de ajuda.

Basta enviar uma mensagem de texto ou √°udio e eu responderei usando IA!`;
                await message.reply(helpText);
                return;
            }

            // Se for uma mensagem de texto normal, envia para a API DRF
            if (message.type === 'chat') {
                await this.sendToDrfApiAndRespond(message, 'text', message.body);
            } else {
                await message.reply('Desculpe, no momento s√≥ consigo processar mensagens de texto ou √°udio.');
            }

        } catch (error) {
            console.error('‚ùå Erro ao processar mensagem:', error);
            await message.reply('üîß Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.');
        }
    }

    /**
     * Lida com mensagens de m√≠dia (especificamente PTT/√°udio) recebidas do WhatsApp.
     * @param {object} message - Objeto de mensagem do whatsapp-web.js.
     */
    async handleMediaMessage(message) {
        try {
            if (message.type === 'ptt') {
                console.log(`Audio recebido. Baixando...`);
                const media = await message.downloadMedia();
                await this.sendToDrfApiAndRespond(message, 'audio', media.data, media.mimetype);
            } else {
                console.log(`M√≠dia do tipo ${message.type} recebida, mas n√£o processada.`);
                await message.reply('Recebi sua m√≠dia, mas no momento s√≥ consigo processar √°udios.');
            }
        } catch (error) {
            console.error('‚ùå Erro ao lidar com mensagem de m√≠dia:', error);
            await message.reply('üîß Desculpe, ocorreu um erro ao processar sua mensagem de √°udio. Tente novamente.');
        }
    }

    /**
     * Envia a mensagem para a API DRF e processa a resposta.
     * @param {object} originalMessage - O objeto da mensagem original do WhatsApp.
     * @param {string} messageType - O tipo de mensagem ('text', 'audio', 'command').
     * @param {any} content - O conte√∫do da mensagem (texto, base64 do √°udio, objeto de comando).
     * @param {string} [mimeType=null] - O tipo MIME do conte√∫do (para √°udio).
     */
    async sendToDrfApiAndRespond(originalMessage, messageType, content, mimeType = null) {
        const chat = await originalMessage.getChat();
        let typingInterval;

        try {
            const userIdNumeric = this.getNumericWhatsAppId(originalMessage.from);
            if (userIdNumeric === null) {
                console.error(`‚ùå N√£o foi poss√≠vel obter um ID num√©rico v√°lido para o usu√°rio: ${originalMessage.from}.`);
                await originalMessage.reply('üîß Desculpe, n√£o consegui identificar seu ID de usu√°rio. Por favor, tente novamente.');
                return;
            }

            await chat.sendStateTyping();
            typingInterval = setInterval(async () => {
                try {
                    await chat.sendStateTyping();
                } catch (error) {
                    console.log('Erro ao renovar estado de digita√ß√£o:', error.message);
                }
            }, 2000);

            let axiosConfig = {
                method: 'post',
                url: 'message/',
                data: {}, // Inicializa data como um objeto vazio
                headers: { 'Content-Type': 'application/json' } // Default para JSON
            };

            // Preenche os dados e headers com base no tipo de mensagem
            if (messageType === 'text') {
                axiosConfig.data = { type: 'text', content: content, user_id: userIdNumeric };
            } else if (messageType === 'command') {
                axiosConfig.data = { type: 'command', command: content.command, user_id: userIdNumeric };
            } else if (messageType === 'audio') {
                const formData = new FormData();
                formData.append('type', 'audio');
                const audioBuffer = Buffer.from(content, 'base64');
                // Altera√ß√£o aqui: Passa o Buffer diretamente.
                // O terceiro argumento √© o nome do arquivo, que pode ser √∫til para a API.
                formData.append('audio_file', audioBuffer, {
                    filename: 'audio.ogg', // Nome do arquivo que a API receber√°
                    contentType: mimeType // Tipo MIME do arquivo
                });
                formData.append('user_id', userIdNumeric);

                axiosConfig.data = formData;
                axiosConfig.headers = { ...formData.getHeaders() }; // Headers para multipart/form-data
                // √â essencial que a API retorne JSON para a resposta, n√£o bin√°rio diretamente,
                // a menos que voc√™ queira tratar isso separadamente no frontend com responseType: 'arraybuffer' aqui.
                // Para este caso, a API deve retornar JSON contendo o base64 do √°udio se for uma resposta de √°udio.
            } else {
                throw new Error(`Tipo de mensagem '${messageType}' n√£o suportado para envio √† API.`);
            }

            const response = await this.ensureAuthenticatedCall(axiosConfig);
            const contentType = response.headers['content-type'];
            console.log('Content-Type da resposta da API DRF:', contentType);

            // --- L√≥gica de tratamento de resposta din√¢mica SIMPLIFICADA ---
            if (contentType && contentType.includes('application/json')) {
                const apiResponse = response.data; // Axios j√° parseia JSON automaticamente por padr√£o

                if (apiResponse.status === 'success') {
                    switch (apiResponse.type) {
                        case 'text':
                        case 'command_response':
                            await originalMessage.reply(apiResponse.response);
                            break;
                        case 'audio':
                            if (apiResponse.response && apiResponse.mime_type) {
                                // Assume que o 'response' do JSON cont√©m o base64 do √°udio
                                const media = new MessageMedia(apiResponse.mime_type, apiResponse.response, 'response');
                                await originalMessage.reply(media);
                            } else {
                                console.warn('JSON de √°udio de sucesso sem base64 ou mime_type:', apiResponse);
                                await originalMessage.reply('Recebi um √°udio, mas n√£o consegui reproduzi-lo.');
                            }
                            break;
                        case 'image':
                        case 'video':
                        case 'document':
                            if (apiResponse.response && apiResponse.mime_type) {
                                // Para outros tipos de m√≠dia (se o Django retornar base64/URL e mimetype)
                                const media = new MessageMedia(apiResponse.mime_type, apiResponse.response, 'response');
                                await originalMessage.reply(media);
                            } else {
                                console.warn(`JSON de ${apiResponse.type} sem base64/URL ou mime_type:`, apiResponse);
                                await originalMessage.reply(`Recebi um(a) ${apiResponse.type}, mas n√£o consegui exibi-lo(a).`);
                            }
                            break;
                        default:
                            console.warn('Tipo de resposta JSON de sucesso inesperado:', apiResponse.type);
                            await originalMessage.reply('Recebi uma resposta do servidor, mas n√£o sei como process√°-la.');
                            break;
                    }
                } else {
                    // Caso a API retorne um JSON de erro (com status: 'error' ou similar)
                    console.error('Erro detalhado da API (JSON):', apiResponse.message || apiResponse.detail || JSON.stringify(apiResponse));
                    await originalMessage.reply(`Erro da API: ${apiResponse.message || apiResponse.detail || 'Ocorreu um erro desconhecido.'}`);
                }
            } else {
                // Caso a API retorne um Content-Type desconhecido ou n√£o suportado diretamente
                // Ex: Se a API retornar um √°udio bin√°rio *diretamente* sem JSON.
                // O Axios geralmente n√£o parseia isso automaticamente, mas `response.data` conter√° o bin√°rio.
                console.warn('Resposta da API com Content-Type inesperado ou sem JSON:', contentType);
                // Tentar logar o conte√∫do bruto para depura√ß√£o
                if (response.data) {
                    try {
                        console.warn('Conte√∫do bruto da resposta:', Buffer.from(response.data).toString('utf8').substring(0, 500) + '...'); // Limita o log
                    } catch (e) {
                        console.warn('N√£o foi poss√≠vel converter resposta para string para log:', e.message);
                    }
                }
                await originalMessage.reply('Desculpe, recebi uma resposta do servidor que n√£o consigo entender.');
            }
            // --- Fim da l√≥gica de tratamento de resposta din√¢mica ---

        } catch (error) {
            // Captura erros de rede, erros da API que n√£o foram 401 e erros de reautentica√ß√£o
            console.error('‚ùå Erro na comunica√ß√£o com a API DRF ou reautentica√ß√£o:', error.message);
            // Mensagem amig√°vel para o usu√°rio
            await originalMessage.reply('üîß Desculpe, ocorreu um erro ao comunicar com o servidor. Tente novamente.');
        } finally {
            // Garante que o estado de "digitando" √© limpo
            if (typingInterval) {
                clearInterval(typingInterval);
            }
            await chat.clearState();
        }
    }

    /**
     * Inicia o cliente WhatsApp e as depend√™ncias.
     */
    async start() {
        console.log('üöÄ Iniciando WhatsApp Bot (Gateway para DRF com JWT)...');
        
        // Valida as vari√°veis de ambiente essenciais
        if (!this.drfApiConfig.baseURL || !this.drfApiConfig.username || !this.drfApiConfig.password) {
            console.error('‚ùå DRF_API_BASE_URL, DRF_USERNAME ou DRF_PASSWORD n√£o est√£o configurados no arquivo .env');
            process.exit(1); // Encerra o processo se as configs essenciais estiverem faltando
        }

        console.log(`üîó Bot configurado para conectar em: ${this.drfApiConfig.baseURL}`);

        await this.client.initialize();
    }

    /**
     * Para o cliente WhatsApp.
     */
    async stop() {
        console.log('üõë Parando WhatsApp Bot...');
        await this.client.destroy();
    }
}

// Inicializa e executa o bot
const bot = new WhatsAppOpenAIBot();

// Gerenciamento de sinais de interrup√ß√£o para desligamento gracioso
process.on('SIGINT', async () => {
    console.log('\nüõë Recebido sinal de interrup√ß√£o...');
    await bot.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë Recebido sinal de termina√ß√£o...');
    await bot.stop();
    process.exit(0);
});

// Inicia o bot, capturando e logando quaisquer erros fatais
bot.start().catch(error => {
    console.error('‚ùå Erro fatal ao iniciar o bot:', error);
    process.exit(1);
});

module.exports = WhatsAppOpenAIBot;