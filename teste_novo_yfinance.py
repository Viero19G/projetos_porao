# An√°lise e Previs√£o de A√ß√µes com Gera√ß√£o de Relat√≥rio PDF
# Autor: Assistente IA
# Data: 2025

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import pdfkit
from jinja2 import Template
import warnings
from datetime import datetime, timedelta
import os
import base64
from io import BytesIO
import time
import random
import pickle

warnings.filterwarnings('ignore')

class StockAnalyzer:
    def __init__(self, ticker_symbol):
        self.ticker = ticker_symbol
        self.data = None
        self.model = None
        self.scaler = StandardScaler()
        self.predictions = {}
        
    def fetch_data(self, period="2y", use_cache=True):
        """Busca dados hist√≥ricos do ativo com cache e retry usando melhores pr√°ticas"""
        cache_file = f"{self.ticker}_cache.pkl"
        
        # Tentar carregar do cache se existir e for recente (menos de 4 horas)
        if use_cache and os.path.exists(cache_file):
            try:
                cache_time = os.path.getmtime(cache_file)
                if time.time() - cache_time < 14400:  # 4 horas
                    with open(cache_file, 'rb') as f:
                        self.data = pickle.load(f)
                    print(f"‚úÖ Dados carregados do cache para {self.ticker}: {len(self.data)} registros")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar cache: {e}")
        
        # Habilitar modo debug do yfinance para melhor diagn√≥stico
        yf.enable_debug_mode()
        
        # Configura√ß√µes globais do yfinance
        print("üîß Configurando yfinance...")
        
        # Buscar dados online com m√∫ltiplas estrat√©gias
        strategies = [
            ("download_function", self._fetch_with_download, period),
            ("ticker_class", self._fetch_with_ticker, period),
            ("ticker_simple", self._fetch_with_simple_ticker, period)
        ]
        
        for strategy_name, method, param in strategies:
            try:
                print(f"üéØ Estrat√©gia: {strategy_name}")
                result = method(param)
                
                if result and len(result) > 0:
                    self.data = result
                    
                    # Salvar no cache
                    with open(cache_file, 'wb') as f:
                        pickle.dump(self.data, f)
                    
                    print(f"‚úÖ Dados obtidos para {self.ticker}: {len(self.data)} registros")
                    return True
                    
            except Exception as e:
                print(f"‚ùå Falha na estrat√©gia {strategy_name}: {e}")
                continue
        
        print("üîÑ Todas as estrat√©gias falharam. Usando dados de exemplo...")
        return self.create_sample_data()
    
    def _fetch_with_download(self, period):
        """Estrat√©gia 1: Usar yf.download() com configura√ß√µes otimizadas"""
        print("   üì° Usando yf.download()...")
        
        # Calcular datas baseadas no per√≠odo
        end_date = datetime.now()
        if period == "1y":
            start_date = end_date - timedelta(days=365)
        elif period == "2y":
            start_date = end_date - timedelta(days=730)
        else:
            start_date = end_date - timedelta(days=365)
        
        # Delay inicial
        time.sleep(random.uniform(1, 3))
        
        data = yf.download(
            self.ticker, 
            start=start_date.strftime('%Y-%m-%d'),
            end=end_date.strftime('%Y-%m-%d'),
            progress=False,
            show_errors=False,
            threads=False  # Reduzir concorr√™ncia
        )
        
        # Verificar se dados foram retornados
        if data.empty:
            raise Exception("DataFrame vazio retornado")
            
        # Se multi-level columns, simplificar
        if isinstance(data.columns, pd.MultiIndex):
            data.columns = data.columns.droplevel(1)
            
        return data
    
    def _fetch_with_ticker(self, period):
        """Estrat√©gia 2: Usar Ticker.history() com par√¢metros otimizados"""
        print("   üé™ Usando Ticker.history()...")
        
        time.sleep(random.uniform(2, 4))
        
        ticker = yf.Ticker(self.ticker)
        
        # Tentar diferentes par√¢metros
        params_list = [
            {"period": period, "interval": "1d", "auto_adjust": True, "prepost": True},
            {"period": period, "interval": "1d", "auto_adjust": True, "prepost": False},
            {"period": period, "interval": "1d", "auto_adjust": False, "prepost": False},
        ]
        
        for params in params_list:
            try:
                data = ticker.history(**params)
                if not data.empty:
                    return data
            except:
                continue
                
        raise Exception("Todas as varia√ß√µes de par√¢metros falharam")
    
    def _fetch_with_simple_ticker(self, period):
        """Estrat√©gia 3: Ticker simples com m√≠nimos par√¢metros"""
        print("   üéØ Usando Ticker simples...")
        
        time.sleep(random.uniform(3, 6))
        
        ticker = yf.Ticker(self.ticker)
        
        # M√©todo mais simples poss√≠vel
        data = ticker.history(period=period)
        
        if data.empty:
            raise Exception("DataFrame vazio")
            
        return data
    
    def create_sample_data(self):
        """Cria dados de exemplo para demonstra√ß√£o"""
        print("Criando dados de exemplo para demonstra√ß√£o...")
        
        # Gerar dados sint√©ticos baseados em movimento browniano
        np.random.seed(42)
        n_days = 500
        dates = pd.date_range(start='2022-01-01', periods=n_days, freq='D')
        
        # Pre√ßo inicial
        initial_price = 100
        returns = np.random.normal(0.001, 0.02, n_days)  # Retornos di√°rios
        prices = [initial_price]
        
        for i in range(1, n_days):
            prices.append(prices[-1] * (1 + returns[i]))
        
        # Volume sint√©tico
        volumes = np.random.normal(1000000, 200000, n_days)
        volumes = np.abs(volumes).astype(int)
        
        # Criar DataFrame
        self.data = pd.DataFrame({
            'Open': prices,
            'High': [p * random.uniform(1.001, 1.02) for p in prices],
            'Low': [p * random.uniform(0.98, 0.999) for p in prices],
            'Close': prices,
            'Volume': volumes
        }, index=dates)
        
        print(f"Dados de exemplo criados para {self.ticker}: {len(self.data)} registros")
        return True
    
    def prepare_features(self, lookback_days=20):
        """Prepara features para o modelo de regress√£o"""
        if self.data is None:
            return None
            
        df = self.data.copy()
        
        # Criar features t√©cnicas
        df['MA_5'] = df['Close'].rolling(window=5).mean()
        df['MA_20'] = df['Close'].rolling(window=20).mean()
        df['RSI'] = self.calculate_rsi(df['Close'])
        df['Volatility'] = df['Close'].rolling(window=20).std()
        df['Price_Change'] = df['Close'].pct_change()
        df['Volume_MA'] = df['Volume'].rolling(window=20).mean()
        
        # Criar features de lag (valores anteriores)
        for i in range(1, lookback_days + 1):
            df[f'Close_lag_{i}'] = df['Close'].shift(i)
            df[f'Volume_lag_{i}'] = df['Volume'].shift(i)
        
        # Remover NaN
        df = df.dropna()
        
        # Separar features e target
        feature_cols = [col for col in df.columns if 'lag_' in col or col in ['MA_5', 'MA_20', 'RSI', 'Volatility', 'Volume_MA']]
        X = df[feature_cols]
        y = df['Close']
        
        return X, y, df
    
    def calculate_rsi(self, prices, period=14):
        """Calcula o RSI (Relative Strength Index)"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def train_model(self):
        """Treina o modelo de regress√£o linear"""
        X, y, processed_data = self.prepare_features()
        
        if X is None:
            return False
            
        # Dividir dados em treino e teste
        split_idx = int(len(X) * 0.8)
        X_train, X_test = X[:split_idx], X[split_idx:]
        y_train, y_test = y[:split_idx], y[split_idx:]
        
        # Escalar features
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        
        # Treinar modelo
        self.model = LinearRegression()
        self.model.fit(X_train_scaled, y_train)
        
        # Avaliar modelo
        y_pred = self.model.predict(X_test_scaled)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        
        print(f"Modelo treinado - MSE: {mse:.4f}, R¬≤: {r2:.4f}")
        
        self.processed_data = processed_data
        return True
    
    def predict_next_values(self, days=5):
        """Prediz os pr√≥ximos valores com cen√°rios otimista e pessimista"""
        if self.model is None:
            return None
            
        # Usar os √∫ltimos dados para predi√ß√£o
        last_data = self.processed_data.tail(1)
        feature_cols = [col for col in self.processed_data.columns if 'lag_' in col or col in ['MA_5', 'MA_20', 'RSI', 'Volatility', 'Volume_MA']]
        
        predictions = []
        last_features = last_data[feature_cols].values
        
        # Calcular volatilidade hist√≥rica para cen√°rios
        historical_volatility = self.data['Close'].pct_change().std()
        
        for day in range(days):
            # Predi√ß√£o base
            last_features_scaled = self.scaler.transform(last_features)
            base_pred = self.model.predict(last_features_scaled)[0]
            
            # Cen√°rios com base na volatilidade
            optimistic = base_pred * (1 + historical_volatility * 2)  # Cen√°rio otimista
            pessimistic = base_pred * (1 - historical_volatility * 2)  # Cen√°rio pessimista
            
            predictions.append({
                'day': day + 1,
                'base': base_pred,
                'optimistic': optimistic,
                'pessimistic': pessimistic
            })
            
            # Atualizar features para pr√≥xima predi√ß√£o (simplificado)
            last_features = np.roll(last_features, -1)
            last_features[0, -1] = base_pred
        
        self.predictions = predictions
        return predictions
    
    def create_chart(self):
        """Cria gr√°fico com dados hist√≥ricos e previs√µes"""
        plt.style.use('seaborn-v0_8')
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 12))
        
        # Gr√°fico 1: Dados hist√≥ricos e previs√µes
        dates = self.data.index
        closes = self.data['Close']
        
        # Dados hist√≥ricos
        ax1.plot(dates, closes, label='Pre√ßo Hist√≥rico', color='blue', linewidth=2)
        ax1.plot(dates, self.data['Close'].rolling(20).mean(), 
                label='M√©dia M√≥vel 20', color='orange', alpha=0.7)
        
        # Previs√µes
        if self.predictions:
            last_date = dates[-1]
            pred_dates = [last_date + timedelta(days=i) for i in range(1, 6)]
            
            base_values = [p['base'] for p in self.predictions]
            optimistic_values = [p['optimistic'] for p in self.predictions]
            pessimistic_values = [p['pessimistic'] for p in self.predictions]
            
            ax1.plot(pred_dates, base_values, 'o-', color='yellow', 
                    linewidth=3, markersize=8, label='Previs√£o Base')
            ax1.plot(pred_dates, optimistic_values, 's-', color='gold', 
                    linewidth=2, markersize=6, label='Cen√°rio Otimista')
            ax1.plot(pred_dates, pessimistic_values, '^-', color='orange', 
                    linewidth=2, markersize=6, label='Cen√°rio Pessimista')
            
            # √Årea entre cen√°rios
            ax1.fill_between(pred_dates, pessimistic_values, optimistic_values, 
                           color='yellow', alpha=0.3, label='Faixa de Previs√£o')
        
        ax1.set_title(f'An√°lise de Pre√ßos - {self.ticker}', fontsize=16, fontweight='bold')
        ax1.set_xlabel('Data')
        ax1.set_ylabel('Pre√ßo (USD)')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Gr√°fico 2: Volume
        ax2.bar(dates, self.data['Volume'], alpha=0.6, color='gray')
        ax2.set_title('Volume de Negocia√ß√£o', fontsize=14)
        ax2.set_xlabel('Data')
        ax2.set_ylabel('Volume')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Salvar gr√°fico
        chart_path = f'{self.ticker}_analysis.png'
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        return chart_path
    
    def generate_report_html(self, chart_path):
        """Gera relat√≥rio HTML usando Jinja2"""
        
        # Converter imagem para base64
        with open(chart_path, 'rb') as img_file:
            img_base64 = base64.b64encode(img_file.read()).decode()
        
        # Template HTML
        template_str = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Relat√≥rio de An√°lise - {{ ticker }}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; color: #2c3e50; }
                .section { margin: 20px 0; }
                .prediction-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                .prediction-table th, .prediction-table td { 
                    border: 1px solid #ddd; padding: 8px; text-align: center; 
                }
                .prediction-table th { background-color: #f2f2f2; }
                .stats { display: flex; justify-content: space-around; }
                .stat-box { text-align: center; padding: 10px; background: #f8f9fa; border-radius: 5px; }
                .chart { text-align: center; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Relat√≥rio de An√°lise Financeira</h1>
                <h2>{{ ticker }}</h2>
                <p>Data: {{ current_date }}</p>
            </div>
            
            <div class="section">
                <h3>Estat√≠sticas Atuais</h3>
                <div class="stats">
                    <div class="stat-box">
                        <h4>Pre√ßo Atual</h4>
                        <p>${{ current_price }}</p>
                    </div>
                    <div class="stat-box">
                        <h4>Varia√ß√£o (30d)</h4>
                        <p>{{ price_change_30d }}%</p>
                    </div>
                    <div class="stat-box">
                        <h4>Volume M√©dio</h4>
                        <p>{{ avg_volume }}</p>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h3>Previs√µes para os Pr√≥ximos 5 Dias</h3>
                <table class="prediction-table">
                    <tr>
                        <th>Dia</th>
                        <th>Previs√£o Base</th>
                        <th>Cen√°rio Otimista</th>
                        <th>Cen√°rio Pessimista</th>
                    </tr>
                    {% for pred in predictions %}
                    <tr>
                        <td>{{ pred.day }}</td>
                        <td>${{ "%.2f"|format(pred.base) }}</td>
                        <td>${{ "%.2f"|format(pred.optimistic) }}</td>
                        <td>${{ "%.2f"|format(pred.pessimistic) }}</td>
                    </tr>
                    {% endfor %}
                </table>
            </div>
            
            <div class="chart">
                <h3>Gr√°fico de An√°lise</h3>
                <img src="data:image/png;base64,{{ chart_base64 }}" style="max-width: 100%; height: auto;">
            </div>
            
            <div class="section">
                <h3>Metodologia</h3>
                <p>Este relat√≥rio utiliza regress√£o linear com features t√©cnicas para prever pre√ßos futuros. 
                Os cen√°rios otimista e pessimista s√£o calculados com base na volatilidade hist√≥rica do ativo.</p>
                <p><strong>Aviso:</strong> Este relat√≥rio √© apenas para fins educacionais e n√£o constitui recomenda√ß√£o de investimento.</p>
            </div>
        </body>
        </html>
        '''
        
        template = Template(template_str)
        
        # Calcular estat√≠sticas
        current_price = self.data['Close'].iloc[-1]
        price_30d_ago = self.data['Close'].iloc[-30] if len(self.data) >= 30 else self.data['Close'].iloc[0]
        price_change_30d = ((current_price - price_30d_ago) / price_30d_ago) * 100
        avg_volume = self.data['Volume'].mean()
        
        html_content = template.render(
            ticker=self.ticker,
            current_date=datetime.now().strftime('%d/%m/%Y'),
            current_price=f"{current_price:.2f}",
            price_change_30d=f"{price_change_30d:.2f}",
            avg_volume=f"{avg_volume:,.0f}",
            predictions=self.predictions,
            chart_base64=img_base64
        )
        
        return html_content
    
    def generate_pdf_report(self, chart_path):
        """Gera relat√≥rio em PDF"""
        html_content = self.generate_report_html(chart_path)
        
        # Salvar HTML tempor√°rio
        html_file = f'{self.ticker}_report.html'
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        try:
            # Configura√ß√µes do PDF
            options = {
                'page-size': 'A4',
                'margin-top': '0.75in',
                'margin-right': '0.75in',
                'margin-bottom': '0.75in',
                'margin-left': '0.75in',
                'encoding': "UTF-8",
                'no-outline': None,
                'enable-local-file-access': None
            }
            
            # Gerar PDF
            pdf_file = f'{self.ticker}_report.pdf'
            pdfkit.from_file(html_file, pdf_file, options=options)
            
            print(f"Relat√≥rio PDF gerado: {pdf_file}")
            
            # Limpar arquivo HTML tempor√°rio
            os.remove(html_file)
            
            return pdf_file
            
        except Exception as e:
            print(f"Erro ao gerar PDF: {e}")
            print("Verifique se o wkhtmltopdf est√° instalado no sistema")
            return html_file
    
    def run_complete_analysis(self, use_cache=True):
        """Executa an√°lise completa"""
        print("="*60)
        print("üöÄ INICIANDO AN√ÅLISE COMPLETA DE A√á√ïES")
        print("="*60)
        
        # 1. Buscar dados
        print("\nüìä Etapa 1: Buscando dados hist√≥ricos...")
        if not self.fetch_data(use_cache=use_cache):
            print("‚ùå Falha ao obter dados. Tentando com per√≠odo menor...")
            if not self.fetch_data(period="1y", use_cache=use_cache):
                print("‚ùå N√£o foi poss√≠vel obter dados.")
                return False
        
        # 2. Treinar modelo
        print("\nü§ñ Etapa 2: Treinando modelo de Machine Learning...")
        if not self.train_model():
            print("‚ùå Falha no treinamento do modelo.")
            return False
        
        # 3. Fazer previs√µes
        print("\nüîÆ Etapa 3: Gerando previs√µes...")
        predictions = self.predict_next_values()
        if not predictions:
            print("‚ùå Falha nas previs√µes.")
            return False
        
        # 4. Criar gr√°fico
        print("\nüìà Etapa 4: Criando visualiza√ß√µes...")
        chart_path = self.create_chart()
        
        # 5. Gerar relat√≥rio PDF
        print("\nüìÑ Etapa 5: Gerando relat√≥rio PDF...")
        try:
            report_path = self.generate_pdf_report(chart_path)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar PDF: {e}")
            print("üí° Gerando apenas relat√≥rio HTML...")
            report_path = self.generate_html_report(chart_path)
        
        print("\n" + "="*60)
        print("‚úÖ AN√ÅLISE COMPLETA FINALIZADA!")
        print("="*60)
        print(f"üìÅ Arquivos gerados:")
        print(f"   üìà Gr√°fico: {chart_path}")
        print(f"   üìÑ Relat√≥rio: {report_path}")
        print("="*60)
        
        return True
    
    def generate_html_report(self, chart_path):
        """Gera apenas relat√≥rio HTML (fallback se PDF falhar)"""
        html_content = self.generate_report_html(chart_path)
        html_file = f'{self.ticker}_report.html'
        
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"Relat√≥rio HTML gerado: {html_file}")
        return html_file

# Exemplo de uso
if __name__ == "__main__":
    print("üéØ ANALISADOR DE A√á√ïES COM IA")
    print("="*50)
    
    # Lista de tickers populares para teste
    popular_tickers = {
        "1": ("AAPL", "Apple Inc."),
        "2": ("MSFT", "Microsoft Corp."),
        "3": ("GOOGL", "Alphabet Inc."),
        "4": ("TSLA", "Tesla Inc."),
        "5": ("PETR4.SA", "Petrobras (Brasil)"),
        "6": ("VALE3.SA", "Vale (Brasil)"),
        "7": ("CUSTOM", "Inserir ticker personalizado")
    }
    
    print("\nEscolha uma op√ß√£o:")
    for key, (ticker, name) in popular_tickers.items():
        if key != "7":
            print(f"{key}. {ticker} - {name}")
        else:
            print(f"{key}. {name}")
    
    try:
        choice = input("\nDigite sua escolha (1-7): ").strip()
        
        if choice == "7":
            ticker_symbol = input("Digite o ticker desejado (ex: AAPL, PETR4.SA): ").strip().upper()
        elif choice in popular_tickers:
            ticker_symbol = popular_tickers[choice][0]
        else:
            print("Op√ß√£o inv√°lida. Usando AAPL como padr√£o.")
            ticker_symbol = "AAPL"
        
        print(f"\nüéØ Analisando: {ticker_symbol}")
        
        # Perguntar sobre cache
        use_cache_input = input("Usar cache de dados (recomendado para evitar rate limiting)? (s/n): ").strip().lower()
        use_cache = use_cache_input != 'n'
        
    except KeyboardInterrupt:
        print("\n\nOpera√ß√£o cancelada pelo usu√°rio.")
        exit()
    except:
        print("Usando configura√ß√µes padr√£o: AAPL com cache habilitado")
        ticker_symbol = "AAPL"
        use_cache = True
    
    # Criar analisador
    analyzer = StockAnalyzer(ticker_symbol)
    
    # Executar an√°lise completa
    success = analyzer.run_complete_analysis(use_cache=use_cache)
    
    if success:
        print("\n" + "üîÆ PREVIS√ïES PARA OS PR√ìXIMOS 5 DIAS:")
        print("="*60)
        for pred in analyzer.predictions:
            print(f"üìÖ Dia {pred['day']:2d}: "
                  f"Base ${pred['base']:8.2f} | "
                  f"üìà Otimista ${pred['optimistic']:8.2f} | "
                  f"üìâ Pessimista ${pred['pessimistic']:8.2f}")
        
        print("\nüí° Dicas:")
        print("‚Ä¢ Previs√µes s√£o baseadas em an√°lise t√©cnica e modelo de ML")
        print("‚Ä¢ Use apenas como refer√™ncia, n√£o como conselho de investimento")
        print("‚Ä¢ Considere sempre outros fatores fundamentais")
        
    else:
        print("\n‚ùå Falha na an√°lise.")
        print("üí° Poss√≠veis solu√ß√µes:")
        print("‚Ä¢ Verifique sua conex√£o com a internet")
        print("‚Ä¢ Tente novamente em alguns minutos")
        print("‚Ä¢ Use um ticker diferente")
        print("‚Ä¢ Execute com dados de exemplo (modo offline)")
        
        # Oferecer modo de exemplo
        try_example = input("\nDeseja tentar com dados de exemplo? (s/n): ").strip().lower()
        if try_example == 's':
            analyzer.ticker = "EXEMPLO_" + ticker_symbol
            if analyzer.create_sample_data():
                analyzer.run_complete_analysis(use_cache=False)